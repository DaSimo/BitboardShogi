#include "game.h"

Game::Game() :
    Occupied(mat2bb({1,1,1,1,1,1,1,1,1,
                    0,1,0,0,0,0,0,1,0,
                    1,1,1,1,1,1,1,1,1,
                    0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,
                    1,1,1,1,1,1,1,1,1,
                    0,1,0,0,0,0,0,1,0,
                    1,1,1,1,1,1,1,1,1
    })),
    Occupied90(mat2bb({  1,0,1,0,0,0,1,0,1,
                            1,1,1,0,0,0,1,1,1,
                            1,0,1,0,0,0,1,0,1,
                            1,0,1,0,0,0,1,0,1,
                            1,0,1,0,0,0,1,0,1,
                            1,0,1,0,0,0,1,0,1,
                            1,0,1,0,0,0,1,0,1,
                            1,1,1,0,0,0,1,1,1,
                            1,0,1,0,0,0,1,0,1
        })),



    CapturedPieces{{0,0,0,0,0,0,0,0,0}, {0,0,0,0,0,0,0,0,0}},
    move(1)
{



    {
        std::array<int> temp={1,1,1,1,1,1,1,1,1,
                              0,1,0,0,0,0,0,1,0,
                              1,1,1,1,1,1,1,1,1,
                              0,0,0,0,0,0,0,0,0,
                              0,0,0,0,0,0,0,0,0,
                              0,0,0,0,0,0,0,0,0,
                              1,1,1,1,1,1,1,1,1,
                              0,1,0,0,0,0,0,1,0,
                              1,1,1,1,1,1,1,1,1
              };
        std::array<int> temp45=temp;
        std::array<int> temp_45=temp;
        for (i=0;i<81;++i)
        {
            temp45[i]=turnPiFourth(temp[i]);
            temp_45[i] =turnMinusPiFourth(temp[i]);
        }
        Occupied45=mat2bb(temp45);
        Occupied_45=mat2bb(temp_45);

    }

//todo wo steht schwarz und wo zieht er hin????????????
    OccupiedBlack()=mat2bb({1,1,1,1,1,1,1,1,1,
                        0,1,0,0,0,0,0,1,0,
                        1,1,1,1,1,1,1,1,1,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0
    });

    OccupiedBlackPawn()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            1,1,1,1,1,1,1,1,1,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0
    });
    OccupiedBlackKnight()=mat2bb({0,1,0,0,0,0,0,1,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0
    });
    OccupiedBlackLance()=mat2bb({1,0,0,0,0,0,0,0,1,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0
    });
    OccupiedBlackSilver()=mat2bb({0,0,1,0,0,0,1,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0
    });
    OccupiedBlackGold()=mat2bb({0,0,0,1,0,1,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0
    });
    OccupiedBlackBishop()=mat2bb({0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,1,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0
    });
    OccupiedBlackRook()()=mat2bb({   0,0,0,0,0,0,0,0,0,
                                0,1,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0
    });
    OccupiedBlackKing()=mat2bb({   0,0,0,0,1,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0,
                                0,0,0,0,0,0,0,0,0
    });



    OccupiedWhite()=mat2bb({0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        0,0,0,0,0,0,0,0,0,
                        1,1,1,1,1,1,1,1,1,
                        0,1,0,0,0,0,0,1,0,
                        1,1,1,1,1,1,1,1,1
    });


    OccupiedWhitePawn()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            1,1,1,1,1,1,1,1,1,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0
    });
    OccupiedWhiteKnight()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,1,0,0,0,0,0,1,0
    });
    OccupiedWhiteLance()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            1,0,0,0,0,0,0,0,1
    });
    OccupiedWhiteSilver()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,1,0,0,0,1,0,0
    });

    OccupiedWhiteGold()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,1,0,1,0,0,0
    });
    OccupiedWhiteBishop()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,1,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0
    });
    OccupiedWhiteRook()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,1,0,
                            0,0,0,0,0,0,0,0,0
    });
    OccupiedWhiteKing()=mat2bb({0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,0,0,0,0,0,
                            0,0,0,0,1,0,0,0,0
    });

}

    int Game::index(int move_)
    {
        return (move_+1)/2;
    }

    void Game::MakeMove(int org, int dest, bool up) // org = Ursprungsfeld, Zahl von 0 bis 80; dest = Zielfeld, Zahl von 0 bis 80, up = Upgrade, true = befördern false = nicht befördern
    {
        Index = (move+1)/2;
        if(OccupiedPieces[index(-move)][0] == 1)
        {
            //todo finde heraus welche figur geschlagen wird ändere die dazugehörigen Bitboards und füge die geschlagene Figur den CapturedPieces hinzu
        }
        Occupied[org/27][] //todo setBit benutzen


        move = move*(-1);
    }
